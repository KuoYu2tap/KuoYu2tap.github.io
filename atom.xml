<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Go Libary</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-03T09:13:09.158Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>KuoYu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>21v与global使用单林Sync</title>
    <link href="http://yoursite.com/2018/07/03/AAD-and-AD-with-DC/"/>
    <id>http://yoursite.com/2018/07/03/AAD-and-AD-with-DC/</id>
    <published>2018-07-03T03:37:24.000Z</published>
    <updated>2018-07-03T09:13:09.158Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/07/03/AAD-and-AD-with-DC/index.jpg"><a id="more"></a><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>使21V与Global两个区域的AzureAD账号同步。</p><h2 id="工作列表"><a href="#工作列表" class="headerlink" title="工作列表"></a>工作列表</h2><ol><li>准备21v和global两个账号</li><li>创建adsync-21v和adsync-global两个虚拟机</li><li>准备一个域名(golibary.com)，需要在DNS服务商进行解析</li><li>adsync-21v虚拟机提升为DC并构建forest(golibary.com)</li><li>adsync-global虚拟机加入forest作为辅DC加入forest</li><li>两台服务器使用<a href="#AAD-Connect-Sync工作原理">AAD Connect Sync</a>分别同步不同的账号（<strong>一定要使用自定义设置</strong>）</li></ol><p>具体操作见以下文档:</p><p><a href="http://blog.postcha.com/read/80" target="_blank" rel="noopener">在Windows Server 2012 R2 上部署与安装AD域</a></p><p><a href="http://blog.51cto.com/wenzhongxiang/2071743" target="_blank" rel="noopener">Windows Server 2016-部署第一台域控制器</a></p><p><a href="https://cloud.tencent.com/info/61373feb24edf1ddc4b0358d00259a77.html" target="_blank" rel="noopener">Windows Server 2016中添加AD域控制器</a></p><h2 id="理想情况"><a href="#理想情况" class="headerlink" title="理想情况"></a>理想情况</h2><p>在图中理想情况下，我们就可以同步双方账号了。但是现实情况并非如此。</p><p><img src="/2018/07/03/AAD-and-AD-with-DC/index.jpg" alt="index"></p><h2 id="现实情况"><a href="#现实情况" class="headerlink" title="现实情况"></a>现实情况</h2><p>现实情况下有两个地方会出现问题：一是不支持单Forest多DC和AAD的拓扑；二是AAD Connect为单向同步。AD账户在本地创建可以SSO登陆Azure，但是AAD账户是不能同步到本地DC的。所以说，我们现在只可以在本地创建OU(组织单位)创建账号，同步到两边的DC再同步到AAD。当然单向同步是我自己的猜测，具体探究和验证放在<a href="#探究AAD-Connect单项同步特性">探究AAD Connect单项同步特性</a></p><p><img src="/2018/07/03/AAD-and-AD-with-DC/image1.png" alt="image1"></p><h1 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h1><h2 id="解决不支持单林多DC和AAD拓扑的问题"><a href="#解决不支持单林多DC和AAD拓扑的问题" class="headerlink" title="解决不支持单林多DC和AAD拓扑的问题"></a>解决不支持单林多DC和AAD拓扑的问题</h2><p>MicroSoft所提供的<a href="https://docs.azure.cn/zh-cn/active-directory/connect/active-directory-aadconnect-topologies" target="_blank" rel="noopener">AAD与本地域同步的网路拓扑架构</a>中描述了如此架构是不可信的</p><p><img src="/2018/07/03/AAD-and-AD-with-DC/image10.png" alt="image10"></p><p>但是仍然存在特例<a href="https://docs.azure.cn/zh-cn/active-directory/connect/active-directory-aadconnect-topologies#each-object-only-once-in-an-azure-ad-tenant" target="_blank" rel="noopener">带筛选的本地AD拓扑</a>其中在AAD Connect中使用自定义安装，要基于OU/域进行筛选安装，详细见MS官方文档<a href="https://docs.microsoft.com/zh-cn/azure/active-directory/connect/active-directory-aadconnectsync-configure-filtering#organizational-unitbased-filtering" target="_blank" rel="noopener">基于组织单位的筛选|Azure AD Connect 同步：配置筛选</a>。选择性同步Comupter,FSP,MO和自定义的OU即可。</p><p><img src="/2018/07/03/AAD-and-AD-with-DC/image11.png" alt="image11"></p><h2 id="探究AAD-Connect单向同步特性"><a href="#探究AAD-Connect单向同步特性" class="headerlink" title="探究AAD Connect单向同步特性"></a>探究AAD Connect单向同步特性</h2><p>根据安装时出现了安装SQL Server等字样，并且本地DC在安装AAD Connect后出现了SqlLocalDB，可以判断出AAD Connect的同步依赖于本地SQLlocalDB。使用<code>(cmd)&gt; sqllocaldb info</code>可以查询出<code>ADSync</code>数据库，下载<a href="https://docs.microsoft.com/zh-cn/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017&amp;viewFallbackFrom=sql-server-2012" target="_blank" rel="noopener">SQL Server管理工具</a>进行本地连接，连接字符为<code>sqllocaldb info ADSync</code>出现的<code>np:\\.\pipe\&lt;:local&gt;</code>。<img src="/2018/07/03/AAD-and-AD-with-DC/image6.png" alt="image6"></p><p><strong>查询每个表的行数，再分别添加本地AD和AzureAD进行行数对比即可知道单向同步是否成立</strong></p><p>首先使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.name, b.rows </span><br><span class="line"><span class="keyword">FROM</span> sysobjects a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> sysindexes b <span class="keyword">on</span> a.id = b.id</span><br><span class="line"><span class="keyword">WHERE</span> a.type = <span class="string">'u'</span></span><br><span class="line"><span class="keyword">AND</span> b.indid <span class="keyword">in</span> (<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a.name</span><br></pre></td></tr></table></figure><p>查看每个表的rows</p><p><img src="/2018/07/03/AAD-and-AD-with-DC/view_line.jpg" alt="view_line"></p><p>然后创建AD账户<code>Local_AD_1</code>并AAD Connect同步，发现<code>mms_connectorspace</code>等字段增加了，根据字段意思先看<code>mms_connectorspace</code>字段的改变。<br><img src="/2018/07/03/AAD-and-AD-with-DC/ad_created.jpg" alt="ad_created"></p><p>增加了我们刚刚添加的账户和一个其他账户（先猜测为AAD账户，用于和本地AD同步用，但是两者的ID都不一样，目前不清楚其中的细节）。而且Azure上的用户也多出了Local_AD_1，是Windows Server AD。</p><p><img src="/2018/07/03/AAD-and-AD-with-DC/after_ad_created.jpg" alt="after_ad_created"></p><p>然后我们再Azure上创建一个Azure_AD_User_1，是AAD账户，本地DC运行AAD Connect同步数据，本地并没有出现同名账户。<code>mms_connectorspace</code>的行数也没有变化。</p><p><img src="/2018/07/03/AAD-and-AD-with-DC/aad_created.jpg" alt="aad_created"></p><h3 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h3><p>通过上部分实验，我认为AzureAD存储于微软的官方服务器，而本地AD在同步后会在微软的官方服务器上创建同名账户用于Azure登陆使用。</p><h1 id="存疑"><a href="#存疑" class="headerlink" title="存疑"></a>存疑</h1><h2 id="虚拟机DC被删除后，Azure上的账户并没有被删除"><a href="#虚拟机DC被删除后，Azure上的账户并没有被删除" class="headerlink" title="虚拟机DC被删除后，Azure上的账户并没有被删除"></a>虚拟机DC被删除后，Azure上的账户并没有被删除</h2><p>猜测经过AAD Connect Sync后，本地DC的资料都会上传至微软的数据库，用于其他DC同步。</p><h2 id="OU如何在Azure-AD上显示"><a href="#OU如何在Azure-AD上显示" class="headerlink" title="OU如何在Azure AD上显示"></a>OU如何在Azure AD上显示</h2><p>在本地DC创建MiroMOOC这个OU并不能同步到AAD上。</p><h2 id="本地DC创建一个账户后数据库出现两条记录"><a href="#本地DC创建一个账户后数据库出现两条记录" class="headerlink" title="本地DC创建一个账户后数据库出现两条记录"></a>本地DC创建一个账户后数据库出现两条记录</h2><p>待探讨。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="AAD-Connect-Sync工作原理"><a href="#AAD-Connect-Sync工作原理" class="headerlink" title="AAD Connect Sync工作原理"></a>AAD Connect Sync工作原理</h2><p><img src="/2018/07/03/AAD-and-AD-with-DC/image3.png" alt="image3"></p><h2 id="AAD-Coonect-Sync-都同步了什么？"><a href="#AAD-Coonect-Sync-都同步了什么？" class="headerlink" title="AAD Coonect Sync 都同步了什么？"></a>AAD Coonect Sync 都同步了什么？</h2><p><img src="/2018/07/03/AAD-and-AD-with-DC/image2.png" alt="image2"></p><table><thead><tr><th>选项</th><th>功能描述</th></tr></thead><tbody><tr><td>Exchange 混合部署   Exchange Hybrid Deployment</td><td>Exchange 混合部署功能使   Exchange   邮箱能够在本地和 Office 365 中共存。</td></tr><tr><td>Exchange 邮件公用文件夹   Exchange Mail Public Folders</td><td>类似于OneDrive</td></tr><tr><td>Azure AD 应用程序和属性筛选   Azure AD app and attribute   filtering</td><td>可以使用本地   Active   Directory 中的属性扩展   Azure   AD 中的架构</td></tr><tr><td>密码哈希同步   Password hash synchronization</td><td>减少密码数目，用户只需维护一个密码。</td></tr><tr><td>密码写回   Password writeback</td><td>通过启用密码写回，源自   Azure   AD 的密码更改将写回到本地目录。</td></tr><tr><td>设备写回   Device writeback</td><td>Azure AD登陆的设备信息写回本地   Active   Directory 以实现条件性访问方案。</td></tr><tr><td>目录扩展属性同步   Directory extension attribute   sync</td><td>通过启用目录扩展属性同步，可将指定的属性同步到   Azure   AD。</td></tr></tbody></table><h2 id="一个AD网域底下的基本对象，有那些？"><a href="#一个AD网域底下的基本对象，有那些？" class="headerlink" title="一个AD网域底下的基本对象，有那些？"></a>一个AD网域底下的基本对象，有那些？</h2><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>Domain Controllers</td><td>存储网域所属的网域控制站（简称DC、域控）</td></tr><tr><td>Computers</td><td>存储加入网域的计算机对象</td></tr><tr><td>Builtin</td><td>存储内置的账户组群</td></tr><tr><td>Users</td><td>存储AD中的用户对象</td></tr><tr><td>待加入…</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/07/03/AAD-and-AD-with-DC/index.jpg&quot;&gt;
    
    </summary>
    
      <category term="work" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="azure" scheme="http://yoursite.com/tags/azure/"/>
    
  </entry>
  
  <entry>
    <title>基于Angular.js提交规范的git-commit-message</title>
    <link href="http://yoursite.com/2018/05/09/git-commit-conventions/"/>
    <id>http://yoursite.com/2018/05/09/git-commit-conventions/</id>
    <published>2018-05-09T06:29:12.000Z</published>
    <updated>2018-07-03T06:41:03.804Z</updated>
    
    <content type="html"><![CDATA[<!--index image --><img src="/2018/05/09/git-commit-conventions/index.jpg"><!--detail--><a id="more"></a><h2 id="提交格式"><a href="#提交格式" class="headerlink" title="提交格式"></a>提交格式</h2><p>格式化git-commit-message是一种良好的提交习惯，规范的Git提交信息提供了清晰的数据，可以帮助编码人员快速了解提交信息和作用，优势见<a href="#使用标准的优势">使用标准的优势</a>。</p><p>以下规范是参考Google公司Angular.js项目提交规范所制，并加入<code>&lt;(#work-item-id)&gt;</code>关联工作任务项，以求帮助编码人员跟踪任务进度。更多解释见 <a href="#详细介绍">详细介绍</a>。</p><p>自定义自己的提交模板，可以减少录入操作，便于记忆，见<a href="#自定义提交模板">自定义提交模板</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; &lt;(#work-item-id)&gt;</span><br><span class="line">// BLANK LINE</span><br><span class="line">&lt;body&gt;</span><br><span class="line">// BLANK LINE</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><h2 id="格式详细介绍"><a href="#格式详细介绍" class="headerlink" title="格式详细介绍"></a>格式详细介绍</h2><p>Commit message 通过一个header，一个body和一个footer，通过空行进行分割组成，每一行最多有<strong>72个字符</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; &lt;(#work-item-id)&gt;</span><br><span class="line">// BLANK LINE</span><br><span class="line">&lt;body&gt;</span><br><span class="line">// BLANK LINE</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><blockquote><p>必填项，Commit的种类，便于区分commit的功能。</p></blockquote><ul><li><strong>build</strong>: 影响系统构建或外部依赖项的更改（示例范围：gulp，broccoli，npm） </li><li><strong>ci</strong>: 对CI配置文件和脚本的更改（示例范围：Travis，Circle，BrowserStack，SauceLabs） </li><li><strong>docs</strong>: 文档（documentation）</li><li><strong>feat</strong>: 新功能（feature）</li><li><strong>fix</strong>: 修补bug</li><li><strong>perf</strong>: 代码更改可提高性能</li><li><strong>refactor</strong>: 重构（即不是新增功能，也不是修改bug的代码变动）</li><li><strong>style</strong>: 不影响代码含义的更改（空格，格式设置，缺少分号等）</li><li><strong>test</strong>: 添加缺少的测试或更正现有的测试 </li></ul><h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><blockquote><p>必填项，本次commit会影响的范围。</p></blockquote><p>大范围影响区域使用<code>*</code> ，然后在<code>&lt;body&gt;</code>写入具体影响点——<a href="https://github.com/angular/angular.js/commit/7e5a12e2c19fe6e3d43367ba56f204a2aeda4ff4" target="_blank" rel="noopener">举例</a></p><h3 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h3><blockquote><p><code>subject</code>是 commit 目的的简短描述，不超过50个字符。</p></blockquote><p>有三个注意点： </p><ul><li>以动词开头，使用第一人称现在时，比如<code>change</code>，而不是<code>changed</code>或<code>changes</code><ul><li>第一个字母小写</li><li>结尾不加句号（<code>.</code>）</li></ul></li></ul><h3 id="work-item-id"><a href="#work-item-id" class="headerlink" title="work-item-id"></a>work-item-id</h3><blockquote><p>这是一个可选项，它关联着本次commit所对应的工作任务项。</p></blockquote><p>将<code>work-item-id</code>放于commit-message的首部，便于编码团队进行任务跟踪。</p><h3 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h3><blockquote><p>特殊情况，表明撤销以前的commit。</p></blockquote><p>以<code>revert:</code> 作为开头，后面跟随被撤销commit的Hash头。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">revert: feat(pencil): add &apos;graphiteWidth&apos; option</span><br><span class="line"></span><br><span class="line">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure></p><p><code>&lt;body&gt;</code>部分是固定的：<code>This reverts commit &lt;hash&gt;.</code></p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的<code>Reverts</code>小标题下面。  </p><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><blockquote><p>可选项，body 部分是对本次 commit 的详细描述，可以分成多行，但每行不超过72个字符。 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">More detailed explanatory text, if necessary.  Wrap it to </span><br><span class="line">about 72 characters or so. </span><br><span class="line"></span><br><span class="line">Further paragraphs come after blank lines.</span><br><span class="line"></span><br><span class="line">- Bullet points are okay, too</span><br><span class="line">- Use a hanging indent</span><br></pre></td></tr></table></figure><p>有三个注意点：</p><ul><li>使用第一人称现在时，比如使用<code>change</code>而不是<code>changed</code>或<code>changes</code>。</li><li>应该说明代码变动的动机，以及与以前行为的对比。 </li><li>每行不超过72个字符</li></ul><p>参考文档：<a href="https://blogs.msdn.microsoft.com/devops/2016/03/02/linking-work-items-to-git-branches-commits-and-pull-requests/" target="_blank" rel="noopener">Linking Work Items to Git Branches, Commits, and Pull Requests</a></p><h3 id="footer"><a href="#footer" class="headerlink" title="footer"></a>footer</h3><blockquote><p>可选项，footer 部分只有两种选择：<strong>不兼容变动</strong>和<strong>关闭 issue/pull request</strong>。</p></blockquote><h4 id="不兼容变动"><a href="#不兼容变动" class="headerlink" title="不兼容变动"></a>不兼容变动</h4><p>如果当前代码与上一个版本不兼容，则 footer 部分以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class="line">    </span><br><span class="line">        To migrate the code follow the example below:</span><br><span class="line">    </span><br><span class="line">        Before:</span><br><span class="line">    </span><br><span class="line">        scope: &#123;</span><br><span class="line">          myAttr: &apos;attribute&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        After:</span><br><span class="line">    </span><br><span class="line">        scope: &#123;</span><br><span class="line">          myAttr: &apos;@&apos;,</span><br><span class="line">        &#125;</span><br><span class="line">The removed `inject` wasn&apos;t generaly useful for directives so there should be no code using it.</span><br></pre></td></tr></table></figure><h4 id="关闭issue-pull-request"><a href="#关闭issue-pull-request" class="headerlink" title="关闭issue/pull request"></a>关闭<code>issue</code>/<code>pull request</code></h4><p>如果当前 commit 针对某个issue，那么可以在 footer 部分关闭这个<code>issue</code>。</p><pre><code>Closes #&lt;issue-id&gt;</code></pre><p>也可以一次关闭多个 <code>issue</code> 。</p><pre><code>Closes #&lt;issue-id_1&gt;, #&lt;issue-id_2&gt;, #&lt;issue-id_3&gt;</code></pre><p>同时也可以用于<code>pull request</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Closes #&lt;pull-request-id&gt;</span><br></pre></td></tr></table></figure><p>当关闭<code>pull request</code>，而这个PR关联了多个<code>issue</code>时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Closes #&lt;pull-request-id&gt;</span><br><span class="line">Related #&lt;issue-id_1&gt;, #&lt;issue-id_2&gt;, #&lt;issue-id_3&gt;</span><br></pre></td></tr></table></figure><h2 id="使用标准的优势"><a href="#使用标准的优势" class="headerlink" title="使用标准的优势"></a>使用标准的优势</h2><h3 id="提供清晰的历史信息，方便快速浏览"><a href="#提供清晰的历史信息，方便快速浏览" class="headerlink" title="提供清晰的历史信息，方便快速浏览"></a>提供清晰的历史信息，方便快速浏览</h3><p>通过<code>$ git log &lt;last tag&gt; HEAD --pretty=format:%s</code>命令可以查看历史commit的简要信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root~/angular.js]$ git <span class="built_in">log</span> fb2d3f --pretty=format:%s |head -4</span><br><span class="line"></span><br><span class="line">docs(guide/Components): add link to documentation <span class="keyword">for</span> component method</span><br><span class="line">docs(angular.Module): improved documentation <span class="keyword">for</span> component method</span><br><span class="line">fix(input[date]): correctly parse 2-digit years</span><br><span class="line">docs(guide/migration): add notes on 1.6 to 1.7 migration</span><br></pre></td></tr></table></figure><h3 id="便于快速过滤某些Commit，快速定位所需要的信息"><a href="#便于快速过滤某些Commit，快速定位所需要的信息" class="headerlink" title="便于快速过滤某些Commit，快速定位所需要的信息"></a>便于快速过滤某些Commit，快速定位所需要的信息</h3><p>如果你想查找某种提交，可以使用<code>$ git log &lt;last tag&gt; HEAD --grep=&#39;^fix&#39;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root~/angular.js]$ git <span class="built_in">log</span> fb2d3f --grep=<span class="string">'^fix'</span> --pretty=format:%s |head -4</span><br><span class="line"></span><br><span class="line">fix(input[date]): correctly parse 2-digit years</span><br><span class="line">fix(input): allow overriding timezone <span class="keyword">for</span> date input types</span><br><span class="line">fix(input): take timezone into account when validating minimum and maximum date types</span><br><span class="line">fix(jqLite): make removeData() not remove event handlers</span><br></pre></td></tr></table></figure></p><p>如果你想仅显示本次发布新增功能，可以使用<code>$ git log &lt;last tag&gt; HEAD --grep=feture</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root~/angular.js]$ git <span class="built_in">log</span> --grep=feture</span><br><span class="line"></span><br><span class="line">commit 891acf4c201823fd2c925ee321c70d06737d5944</span><br><span class="line">Author: Georgios Kalpakas &lt;g.kalpakas@hotmail.com&gt;</span><br><span class="line">Date:   Wed Oct 29 18:48:04 2014 +0200</span><br><span class="line"></span><br><span class="line">    fix(<span class="variable">$route</span>): fix redirection with optional/eager params</span><br><span class="line"></span><br><span class="line">    Previously, when (automatically) redirecting from path that fetured a</span><br><span class="line">    trailing slash and optional or <span class="string">"eager"</span> parameters, the resulting path</span><br><span class="line">    would (incorrectly) contain the special characters (`?`,`*`) along with</span><br><span class="line">    the parameter values.</span><br><span class="line"></span><br><span class="line">    Closes <span class="comment">#9819</span></span><br><span class="line"></span><br><span class="line">    Closes <span class="comment">#9827</span></span><br></pre></td></tr></table></figure></p><h3 id="便于使用脚本生成CHANGELOG-md"><a href="#便于使用脚本生成CHANGELOG-md" class="headerlink" title="便于使用脚本生成CHANGELOG.md"></a>便于使用脚本生成CHANGELOG.md</h3><p>changelog通常展示三种修改日志: <strong>新特性</strong>，<strong>修复Bug</strong>，<strong>重大修改</strong>。当发布新版本时通过脚本生成此列表，用于说明与上一版本的差异。当然你可以在发布前自定义加入其他修改类型的日志。以下是生成的例子:</p><p><a href="https://github.com/karma-runner/karma/blob/master/CHANGELOG.md" target="_blank" rel="noopener">举例一</a>/<a href="https://github.com/btford/grunt-conventional-changelog/blob/master/CHANGELOG.md" target="_blank" rel="noopener">举例二</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">6.0.0 (2016-02-11)</span><br><span class="line">Bug Fixes</span><br><span class="line">    concat: make sure the encoding is always buffer (75fc4ee)</span><br><span class="line">    error: attach handler to the stream (a54a194)</span><br><span class="line"></span><br><span class="line">Chores</span><br><span class="line">    deps: bump (0320cba)</span><br><span class="line"></span><br><span class="line">BREAKING CHANGES</span><br><span class="line">    deps: Using conventional-changelog v1.</span><br></pre></td></tr></table></figure><h2 id="自定义提交模板"><a href="#自定义提交模板" class="headerlink" title="自定义提交模板"></a>自定义提交模板</h2><h3 id="使用git-config自定义模板"><a href="#使用git-config自定义模板" class="headerlink" title="使用git config自定义模板"></a>使用<code>git config</code>自定义模板</h3><p>你可以使用以下的bash文件，用于创建commit message标准的模板。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"please input username:"</span> name</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"please input user email:"</span> email</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;'</span> &gt; ~/.prepare-commit-msg-temp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">''</span> &gt;&gt; ~/.prepare-commit-msg-temp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'# &lt;body&gt;'</span> &gt;&gt; ~/.prepare-commit-msg-temp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# Author: <span class="variable">$name</span>"</span> &gt;&gt; ~/.prepare-commit-msg-temp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"# E-mail: <span class="variable">$email</span>"</span> &gt;&gt;  ~/.prepare-commit-msg-temp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">''</span> &gt;&gt; ~/.prepare-commit-msg-temp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'# &lt;footer&gt;'</span> &gt;&gt; ~/.prepare-commit-msg-temp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">''</span> &gt;&gt; ~/.prepare-commit-msg-temp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'# HINT: Any line cannot be longer 70 characters!'</span> &gt;&gt; ~/.prepare-commit-msg-temp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'# types: feat, fix, docs, style, refactor, test, chore(maintain)'</span> &gt;&gt; ~/.prepare-commit-msg-temp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">''</span> &gt;&gt; ~/.prepare-commit-msg-temp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'#-------------------------------------------------------'</span> &gt;&gt; ~/.prepare-commit-msg-temp</span><br><span class="line">git config --global commit.template ~/.prepare-commit-msg-temp <span class="comment"># customizing commit template</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"SUCCESS!"</span></span><br></pre></td></tr></table></figure><p>运行<code>git commit</code>可以获得以下commit模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt; &lt;(<span class="comment">#work-item-id)&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;body&gt;</span></span><br><span class="line"><span class="comment"># Author: laisc</span></span><br><span class="line"><span class="comment"># E-mail: laisc@go-pin.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;footer&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HINT: Any line cannot be longer 70 characters!</span></span><br><span class="line"><span class="comment"># types: feat, fix, docs, style, refactor, test, chore(maintain)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change message...</span></span><br></pre></td></tr></table></figure><p>如果你想构建自己的提交模板，可以<code>vi ~/.prepare-commit-msg-temp</code>增加自定义提示。</p><h3 id="使用git-hooks构建客户端提交模板"><a href="#使用git-hooks构建客户端提交模板" class="headerlink" title="使用git hooks构建客户端提交模板"></a>使用<code>git hooks</code>构建客户端提交模板</h3><p>编辑项目的<code>.git/hooks/</code>下的<code>prepare-commit-msg.sample</code>，并且改名为<code>prepare-commit-msg</code>即可创建客制化提交模板。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root~/angular.js]$ ls .git/hooks/</span><br><span class="line">applypatch-msg.sample  post-update.sample     prepare-commit-msg.sample</span><br><span class="line">commit-msg.sample      pre-applypatch.sample  pre-rebase.sample</span><br><span class="line">post-commit.sample     pre-commit.sample      update.sample</span><br><span class="line">post-receive.sample</span><br></pre></td></tr></table></figure></p><p>详情见<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git#_code_commit_template_code" target="_blank" rel="noopener">自定义-Git-配置-Git</a> </p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://chris.beams.io/posts/git-commit/" target="_blank" rel="noopener">How to Write a Git Commit Message</a></p><p><a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#" target="_blank" rel="noopener">AngularJS Git Commit Message Conventions | Google docs</a></p><p><a href="https://gist.github.com/aemonge/9e60332c6a3e7147ee8e" target="_blank" rel="noopener">Customize your commit template | github gist</a></p><p><a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#type" target="_blank" rel="noopener">Commit Message Guidelines | github docs</a></p><p><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#committemplate-7kT8HRswI4" target="_blank" rel="noopener">Customizing-Git-Git-Configuration</a></p><p><a href="https://blogs.msdn.microsoft.com/devops/2016/03/02/linking-work-items-to-git-branches-commits-and-pull-requests" target="_blank" rel="noopener">linking-work-items-to-git-branches-commits-and-pull-requests | MS devops</a></p><p><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">Commit message 和 Change log 编写指南 | 阮一峰的博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!--index image --&gt;
&lt;img src=&quot;/2018/05/09/git-commit-conventions/index.jpg&quot;&gt;
&lt;!--detail--&gt;
    
    </summary>
    
      <category term="work" scheme="http://yoursite.com/categories/work/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="document" scheme="http://yoursite.com/tags/document/"/>
    
  </entry>
  
  <entry>
    <title>从二分图探讨如何解决排课问题</title>
    <link href="http://yoursite.com/2017/09/26/from-bipartite-grah-to-lesson-scheduling/"/>
    <id>http://yoursite.com/2017/09/26/from-bipartite-grah-to-lesson-scheduling/</id>
    <published>2017-09-26T12:41:39.000Z</published>
    <updated>2018-07-03T02:02:08.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是二分图"><a href="#什么是二分图" class="headerlink" title="什么是二分图"></a>什么是二分图</h2><blockquote><p>二分图是一种图论问题，探讨相邻节点的染色问题</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAX_N];</span><br><span class="line"><span class="keyword">int</span> V = MAX_N;</span><br><span class="line"><span class="keyword">int</span> color[MAX_N] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于建立图，内部代码为举例说明使用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitGraph</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_N; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAX_N; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != j) G[i].push_back(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//图的深层遍历，以使各个顶点染上不同颜色</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">color[v] = c; <span class="comment">// all v get c</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; G[v].size(); i++) &#123;</span><br><span class="line"><span class="comment">// 如果下一个顶点的颜色和当前顶点相同则不再继续</span></span><br><span class="line"><span class="keyword">if</span> (color[ G[v][i] ] == c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 如果下一顶点的颜色未配置，则向下进行染色</span></span><br><span class="line"><span class="keyword">if</span> (color[ G[v][i] ] == <span class="number">0</span> &amp;&amp; !dfs(G[v][i], -c)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">InitGraph();</span><br><span class="line"><span class="comment">//以每一个顶点为开始进行dfs染色</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (color[i] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!dfs(i, <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上部分的代码，用于染1和-1两种颜色，0为不染色。是最基础的染色算法。但是我想如果出现多种颜色可以用于染色，那么代码应该如何改变呢？<br>之前的颜色是通过赋值1、-1、1、-1、1…以此循环，这相当与形成了一个闭环。<br>当出现多色时，就需要让多个颜色出现环路，那么显然易见，使用%对N取模即可生成0~N-1的闭环。</p><h2 id="多色图"><a href="#多色图" class="headerlink" title="多色图"></a>多色图</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_C = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAX_N]; <span class="comment">// Graph connect data</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; color(MAX_N, <span class="number">-1</span>); <span class="comment">// 将各个顶点的颜色初始化为-1，未使用</span></span><br><span class="line"><span class="keyword">int</span> V = MAX_N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitGraph</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_N; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAX_N; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i != j) G[i].push_back(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="comment">//改变，对c取MAX_Color的模。</span></span><br><span class="line">color[v] = c % MAX_C;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; G[v].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (color[ G[v][i] ] == c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 改变，下一个图的颜色为c+1，但是我认为最优化的是通过不同颜色的使用次数，</span></span><br><span class="line"><span class="comment">// 动态改变优先级。</span></span><br><span class="line"><span class="keyword">if</span> (color[ G[v][i] ] == <span class="number">-1</span> &amp;&amp; !dfs(G[v][i], c+<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">//与上一代码相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然可以解决图的多色不相邻问题，那么是否还能解决其他问题呢？<br>刚巧，我正好遇到了一个有关自动安排考场的问题，需求是将考生的考试科目输入，生成最有效的考场安排。<br>将问题抽象化，单个考生的所有科目相当于一个<a href="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E5%9B%BE/10073908?fr=aladdin" target="_blank" rel="noopener">完全图</a>,每个顶点相连就是说需要每个顶点的颜色不同，那么需要的是将每个完全图拼合成一个完整的图，对所有的顶点进行染色，可以求得考试时间的最少安排。</p><h2 id="安排课表解决方案"><a href="#安排课表解决方案" class="headerlink" title="安排课表解决方案"></a>安排课表解决方案</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_S = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_OBJ = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> MAX_T = <span class="number">4</span>; <span class="comment">//TODO</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; stu[MAX_S]; <span class="comment">//= &#123; &#123;1,2,3&#125;,&#123;2,4,6&#125;,&#123;3,4,5&#125; &#125;;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;P&gt; stu_G[MAX_S];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MAX_OBJ];</span><br><span class="line"><span class="keyword">int</span> objects[MAX_OBJ];</span><br><span class="line"></span><br><span class="line"><span class="comment">//假设学生考试科目数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getStu</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">stu[<span class="number">0</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;</span><br><span class="line">stu[<span class="number">1</span>] = &#123; <span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span> &#125;;</span><br><span class="line">stu[<span class="number">2</span>] = &#123; <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立完全图，需要相当高的复杂度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">getStu();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_S; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> size = stu[i].size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; MAX_S; x++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = x; y &lt; MAX_S; y++) &#123;</span><br><span class="line"><span class="keyword">if</span> (x != y) stu_G[i].push_back(P(stu[i][x], stu[i][y]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过学生的完全图构建考试图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitGraph</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">InitStu();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_S; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; stu_G[i].size(); ++j) &#123;</span><br><span class="line">P &amp;p = stu_G[i][j];</span><br><span class="line">G[p.first<span class="number">-1</span>].push_back(p.second<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">objects[i] = c % MAX_T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G[i].size(); ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (objects[ G[i][j] ] == c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (objects[ G[i][j] ] == <span class="number">-1</span> &amp;&amp; !dfs(G[i][j], c + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">MAX_T = i;</span><br><span class="line">InitGraph();</span><br><span class="line">fill(objects, objects + MAX_OBJ, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_OBJ; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (objects[i] == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!dfs(i, <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">1</span>; z &lt; MAX_OBJ; z++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!solve(z)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_T; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\t"</span>, <span class="string">'A'</span> + i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAX_OBJ; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (objects[j] == i) <span class="built_in">printf</span>(<span class="string">"%d "</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">No</span><br><span class="line">No</span><br><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">A       0 4 5</span><br><span class="line">B       1</span><br><span class="line">C       2</span><br><span class="line">D       3</span><br><span class="line">Yes</span><br><span class="line">A       0</span><br><span class="line">B       1</span><br><span class="line">C       2</span><br><span class="line">D       3</span><br><span class="line">E       4 5</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是二分图&quot;&gt;&lt;a href=&quot;#什么是二分图&quot; class=&quot;headerlink&quot; title=&quot;什么是二分图&quot;&gt;&lt;/a&gt;什么是二分图&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;二分图是一种图论问题，探讨相邻节点的染色问题&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>learn-git-01</title>
    <link href="http://yoursite.com/2016/10/06/learn-git-01/"/>
    <id>http://yoursite.com/2016/10/06/learn-git-01/</id>
    <published>2016-10-06T10:32:24.000Z</published>
    <updated>2018-07-03T06:51:15.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p><code>sudo apt-get git</code><br><code>mkdir learngit</code> and <code>cd learngit</code></p><p><code>git init</code><br>生成了.git文件</p><blockquote><p>千万不要使用Windows自带的记事本编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符.</p></blockquote><blockquote><p>TXT开头添加的<strong>BOM头</strong>是为了识别该文件为UTF8编码文件，其他的编译软件不识别</p></blockquote><h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><p><code>git add File</code>把文件添加到仓库<br><code>git commit -m &quot;提示内容&quot;</code>把文件提交到仓库,-m 添加操作说明<br><code>git status</code>查看仓库状态<br><code>git diff FILE</code> 查看文件<br><code>git log</code> 查看历史记录 <em>包含了修改时间</em> –pretty=oneline 仅显示一行</p><h2 id="版本问题"><a href="#版本问题" class="headerlink" title="版本问题"></a>版本问题</h2><p><code>HEAD</code>代表当前版本，<code>HEAD^</code>代表上一版本，<code>HEAD~100</code>上一百版本。</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p><code>git reset -hard HEAD</code><br><code>git reset -hard CommitId前几位</code> 找回以前的版本。<br>不知道CommitId时，可以使用<code>git relog</code> 查看原来的操作指令。</p><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>上文<code>mkdir learngit</code>创建的learngit文件夹为一个<strong>工作区</strong><br>工作区中有.git隐藏目录，为git的<strong>版本库</strong><br><code>git add</code>把<strong>工作区</strong>的文件放入<strong>暂存区</strong><br><code>git commit</code>把<strong>暂存区</strong>所有的修改提交到分支  </p><p><code>git checkout --FILE</code>把FILE文件在工作区中的修改全部撤销<br>事实上是让FILE文件回到执行<code>git add</code>或者<code>git commit</code>前的状态 </p><p><code>git reset HEAD FILE</code>把FILE在暂存区的修改撤销，重新放回工作区  </p><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>在文件管理器下删除了文件<code>rm FILE</code>,即工作区删除了文件  </p><h2 id="确认删除该文件"><a href="#确认删除该文件" class="headerlink" title="确认删除该文件"></a>确认删除该文件</h2><p><code>git rm FILE</code> and <code>git commit -m &quot;删除FILE&quot;</code>版本库上也删除了FILE</p><h2 id="误删除"><a href="#误删除" class="headerlink" title="误删除"></a>误删除</h2><p><code>git checkout --FILE</code>把版本库中的文件提出来。<br><code>git checkout</code>把版本库的文件提取出来，让本地文件一键还原。</p><h1 id="GitHub远程库"><a href="#GitHub远程库" class="headerlink" title="GitHub远程库"></a>GitHub远程库</h1><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>在github中添加远程库 </p><pre><code>git remote add origin git@github.com:MyName/learngit.git </code></pre><p>本地库推送至远程库</p><pre><code>git push -u origin master    #初次使用，-u 关联分支git push origin master        #日后使用</code></pre><h2 id="从远程库中克隆"><a href="#从远程库中克隆" class="headerlink" title="从远程库中克隆"></a>从远程库中克隆</h2><p>克隆远程库</p><pre><code>git clone git@github.com:Myname/NewGit.git</code></pre><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>当只有一位开发者时只有<code>master</code>分支，我们采用的<code>HEAD</code>-&gt;<code>master</code>，<br>当我们创建一个<code>dev</code>新分支时，<code>HEAD</code>-&gt;<code>dev</code><br>分支的工作流程为:</p><pre><code>创建dev分支 -&gt; 在dev分支下工作 -&gt; 合并dev分支到master分支 -&gt; 删除dev分支，主分支又进一步</code></pre><h2 id="创建dev分支"><a href="#创建dev分支" class="headerlink" title="创建dev分支"></a>创建dev分支</h2><pre><code>git checkout -b dev        #-b 创建并切换git branch                #查看当前分支git checkout master        #切换到master分支</code></pre><h2 id="合并分支并删除"><a href="#合并分支并删除" class="headerlink" title="合并分支并删除"></a>合并分支并删除</h2><pre><code>git merge dev            #合并dev分支git cbranch -d dev        #删除分支</code></pre><h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h2><pre><code>git log --graph        #查看分支冲突示意图</code></pre><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br><span class="line">git add file.txt#在dev分支上添加文件</span><br><span class="line">git checkout master#切换回master分支</span><br><span class="line"></span><br><span class="line">git merge --no-ff -m &quot;merge --no-ff&quot; dev #禁用Fast forward即合并后不删除分支信息</span><br></pre></td></tr></table></figure><h3 id="bug分支"><a href="#bug分支" class="headerlink" title="bug分支"></a>bug分支</h3><blockquote><p>为了修改Bug,先存储当前工作,解决Bug后再提取出来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git stash#储藏当前分支的工作</span><br><span class="line">git stash list#查看储藏的分支</span><br><span class="line"></span><br><span class="line">git stash applystash@&#123;No.&#125; #恢复储藏,但储藏的内容不消失,需要git stash drop</span><br><span class="line">git stash pop#pop方式弹出储藏内容</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Future分支"><a href="#Future分支" class="headerlink" title="Future分支"></a>Future分支</h3><blockquote><p>为了添加一个新功能而创建的Future分支<br>这是一个未合并的分支,删除时显示冲突<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d Future#显示删除冲突,原因该分支未合并</span><br><span class="line">git branch -D Future#成功删除</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>查看远程库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote#返回远程库名列表，-v显示详细信息</span><br><span class="line">git pull#从远程库抓取</span><br></pre></td></tr></table></figure></p><p>因此，多人协作的工作模式通常是这样：<br>1.首先，可以试图用git push origin branch-name推送自己的修改；<br>2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；<br>3.如果合并有冲突，则解决冲突，并在本地提交；<br>4.没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！<br>5.如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream branch-name origin/branch-name。<br>6.这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h1&gt;&lt;p&gt;&lt;code&gt;sudo apt-get git&lt;/code&gt;&lt;br&gt;&lt;code&gt;mkdir learngit&lt;/code&gt; a
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用Nginx+gunicorn部署Flask</title>
    <link href="http://yoursite.com/2016/10/05/Nginx-Gunicorn-deploy-Flask/"/>
    <id>http://yoursite.com/2016/10/05/Nginx-Gunicorn-deploy-Flask/</id>
    <published>2016-10-05T04:32:24.000Z</published>
    <updated>2018-07-03T01:41:22.266Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果想使Flask顺利运行,单单使用Flask自带的server是不够的。因此我们需要Nginx+gunicorn协同工作。</p></blockquote><p>其实单gunicorn也可以使Flask成功发布，但是遭遇本地多个web服务都需要监听80端口时，就没有办法转发，因此需要gunicorn负责转发服务，配合Nginx工作。当然uWSGI也可以胜任转发工作。</p><p>如果本机确定只跑这一个服务，由于gunicorn的性能问题以及对各种Http请求缓冲头的处理没有Nginx完善，我们还是需要Nignx提供正式的服务<br><a href="http://zhidao.baidu.com/link?url=Leky7je6XUPF4iuLa5EaHU3KYQ37Frt_mtK4_mwwrr6lnsMWIJ_s5KSIf4-D3D2bemjC1oFZhGMFGsh2SgUUHSuiM-w2Om-yjKcw6n9MDF7" target="_blank" rel="noopener">资料来源</a></p><h2 id="Gunicorn的安装与配置"><a href="#Gunicorn的安装与配置" class="headerlink" title="Gunicorn的安装与配置"></a>Gunicorn的安装与配置</h2><p>打开python的虚拟环境virtualenv。<br><code>$ source /flask/bin/activate</code></p><p>运行pip安装<br><code>(flask)$ pip install gunicorn</code></p><p>运行gunicorn<br><code>(flask)$ gunicorn -w 8 -b 127.0.0.1:8080 run:app</code></p><p>这里的-w 8参数是打开八个进程（worker）同时处理HTTP请求。-b 127.0.0.1:端口号是设置监听端口，我们设置为8080以供设置Nginx。后面的run:app，是指本地上的run.py中的app实例。</p><h2 id="Nginx的安装和配置"><a href="#Nginx的安装和配置" class="headerlink" title="Nginx的安装和配置"></a>Nginx的安装和配置</h2><p>这里我们不使用python的虚拟环境，所以执行<code>deactivate</code>退出虚拟环境。直接apt-get安装nginx。</p><p><code>$ apt-get install nginx</code></p><p>然后我们转向Nginx的默认配置文件</p><p><code>$ cd /etc/nginx/site-avalidable/default</code></p><p>在目录下备份默认文件<code>sudo cp default default.bak</code></p><p>修改default文件，因为Nginx的版本不同，需要把没有出现的语句都注释掉。</p><p><code>$ sudo vim default</code></p><pre><code>server {    listen 80;    server_name example.org; # 这是HOST机器的外部域名，用地址也行```    location / {        proxy_pass http://127.0.0.1:8080; # 这里是指向 gunicorn host 的服务地址        proxy_set_header Host $host;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    }}</code></pre><p>然后重新启动nginx</p><p><code>$ sudo service nginx restart</code></p><p>后文有让flask程序在linux启动时运行的操作，不赘述。</p><p><a href="http://www.cnblogs.com/Ray-liang/p/4837850.html" target="_blank" rel="noopener">资料来源</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如果想使Flask顺利运行,单单使用Flask自带的server是不够的。因此我们需要Nginx+gunicorn协同工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实单gunicorn也可以使Flask成功发布，但是遭遇本地多个web服务都需
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
      <category term="gunicorn" scheme="http://yoursite.com/tags/gunicorn/"/>
    
  </entry>
  
  <entry>
    <title>安装lxml的辛酸泪</title>
    <link href="http://yoursite.com/2016/10/04/hard-to-install-lxml/"/>
    <id>http://yoursite.com/2016/10/04/hard-to-install-lxml/</id>
    <published>2016-10-04T13:54:24.000Z</published>
    <updated>2018-07-03T01:38:18.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始的错误"><a href="#开始的错误" class="headerlink" title="开始的错误"></a>开始的错误</h2><p>起初不能成功安装lxml，使publish.py不能正常from lxml import html, 导致不能成功发布博客。<br>返回值<code>ImportError: No module named lxml</code><br>所以我尝试<code>pip install lxml</code>，但仍然返回错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/python -c &quot;import setuptools, tokenize;__file__=&apos;/tmp/pip-build-7HN4t8/lxml/setup.py&apos;;exec(compile(getattr(tokenize, &apos;open&apos;, open)(__file__).read().replace(&apos;\r\n&apos;, &apos;\n&apos;), __file__, &apos;exec&apos;))&quot; install --record /tmp/pip-LUVnYB-record/install-record.txt --single-version-externally-managed --compile --install-headers /root/pycode/blogenv/include/site/python2.7/lxml&quot; failed with error code 1 in /tmp/pip-build-7HN4t8/lxml</span><br></pre></td></tr></table></figure><p>通过找各种资料尝试，无果。我决定卸载python的虚拟环境重新安装虚拟环境，并安装包。</p><h2 id="这次的思路为"><a href="#这次的思路为" class="headerlink" title="这次的思路为"></a>这次的思路为</h2><ul><li>更新软件包</li><li>更新pip</li><li>检查requirements.txt的包是否齐全</li><li>通过pip安装requirement.txt</li></ul><p>首先<code>apt-get update</code>更新软件包，然后<code>python -m pip install -U pip</code></p><p>更新pip，最后查看requirements.txt文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Babel==2.3.4</span><br><span class="line">blinker==1.4</span><br><span class="line">click==6.6</span><br><span class="line">coverage==4.2</span><br><span class="line">decorator==4.0.10</span><br><span class="line">Flask==0.11.1</span><br><span class="line">Flask-Babel==0.11.1</span><br><span class="line">Flask-Login==0.3.2</span><br><span class="line">Flask-Mail==0.9.1</span><br><span class="line">flask-mongoengine==0.8</span><br><span class="line">Flask-OpenID==1.2.5</span><br><span class="line">Flask-Script==2.0.5</span><br><span class="line">Flask-SQLAlchemy==2.1</span><br><span class="line">Flask-WhooshAlchemy==0.56</span><br><span class="line">Flask-WTF==0.12</span><br><span class="line">flipflop==1.0</span><br><span class="line">guess-language==0.2</span><br><span class="line">itsdangerous==0.24</span><br><span class="line">Jinja2==2.8</span><br><span class="line">Markdown==2.6.6</span><br><span class="line">markdown2==2.3.1</span><br><span class="line">MarkupSafe==0.23</span><br><span class="line">pbr==1.10.0</span><br><span class="line">pyjwt==1.4.2</span><br><span class="line">python-openid==2.2.5</span><br><span class="line">pytz==2016.6.1</span><br><span class="line">PyYAML==3.12</span><br><span class="line">requests==2.11.1</span><br><span class="line">six==1.10.0</span><br><span class="line">SQLAlchemy==1.0.15</span><br><span class="line">sqlalchemy-migrate==0.10.0</span><br><span class="line">sqlparse==0.2.1</span><br><span class="line">Tempita==0.5.2</span><br><span class="line">Werkzeug==0.11.11</span><br><span class="line">Whoosh==2.7.4</span><br><span class="line">WTForms==2.1</span><br><span class="line">lxml==3.5.0</span><br></pre></td></tr></table></figure><p>这是拿windows上python的requirement文件，有许多包不用安装，修改太麻烦就没有动。</p><p>最后我们使用pip安装<code>pip install -r requirements.txt</code></p><p>终于迎来了喜讯成功安装，这样就可以使用lxml库进行文章解析了。</p><p><code>Successfully installed Babel-2.3.4 Flask-0.11.1 Flask-Babel-0.11.1 Flask-Login-0.3.2 Flask-Mail-0.9.1 Flask-OpenID-1.2.5 Flask-SQLAlchemy-2.1 Flask-Script-2.0.5 Flask-WTF-0.12 Flask-WhooshAlchemy-0.56 Jinja2-2.8 Markdown-2.6.6 MarkupSafe-0.23 PyYAML-3.12 SQLAlchemy-1.0.15 Tempita-0.5.2 WTForms-2.1 Werkzeug-0.11.11 Whoosh-2.7.4 blinker-1.4 click-6.6 coverage-4.2 decorator-4.0.10 flask-mongoengine-0.8 flipflop-1.0 guess-language-0.2 itsdangerous-0.24 lxml-3.5.0 markdown2-2.3.1 mongoengine-0.10.6 pbr-1.10.0 pyjwt-1.4.2 pymongo-3.3.0 python-openid-2.2.5 pytz-2016.6.1 requests-2.11.1 six-1.10.0 sqlalchemy-migrate-0.10.0 sqlparse-0.2.1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开始的错误&quot;&gt;&lt;a href=&quot;#开始的错误&quot; class=&quot;headerlink&quot; title=&quot;开始的错误&quot;&gt;&lt;/a&gt;开始的错误&lt;/h2&gt;&lt;p&gt;起初不能成功安装lxml，使publish.py不能正常from lxml import html, 导致不能成功发
      
    
    </summary>
    
    
      <category term="python-lib" scheme="http://yoursite.com/tags/python-lib/"/>
    
  </entry>
  
  <entry>
    <title>Learn Git 02</title>
    <link href="http://yoursite.com/2016/10/04/learn-git-02/"/>
    <id>http://yoursite.com/2016/10/04/learn-git-02/</id>
    <published>2016-10-04T08:32:24.000Z</published>
    <updated>2018-07-03T01:49:21.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git标签"><a href="#git标签" class="headerlink" title="git标签"></a>git标签</h2><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p>需要切换到分支，<code>git checkout master</code>  </p><pre><code>git tag &lt;name&gt;</code></pre><h3 id="为历史添加标签"><a href="#为历史添加标签" class="headerlink" title="为历史添加标签"></a>为历史添加标签</h3><p>先查询commit ID<br><code>git log --pretty=oneline --addrev-commit</code>  </p><pre><code>git tag &lt;name&gt; CommitIDgit tag -a v0.1 -m &quot;version 0.1 released&quot; 3628164    #-a 指定名称 -m说明文字git show &lt;tagname&gt;            #可查看说明文字git tag -s &lt;tagname&gt;            #添加私钥</code></pre><h3 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h3><pre><code>git tag -d &lt;tagname&gt;        #删除标签git push origin &lt;tagname&gt;    #想远程库添加标签</code></pre><h3 id="删除远程库标签"><a href="#删除远程库标签" class="headerlink" title="删除远程库标签"></a>删除远程库标签</h3><pre><code>git tag -d    &lt;tagname&gt;                     #先删除本地库的标签git push origin :refs/tags/&lt;tagname&gt;    #向远程库推送删除消息</code></pre><h2 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h2><p>先登录github账户,Fork他人项目,再从个人账户上拷下项目<br><code>git clone git@github.com:&lt;UserName&gt;/&lt;OriginName&gt;.git</code></p><h2 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h2><h3 id="颜色修改"><a href="#颜色修改" class="headerlink" title="颜色修改"></a>颜色修改</h3><p>对git status的输出修改颜色</p><pre><code>git config --global color.ui true</code></pre><h3 id="git的过滤"><a href="#git的过滤" class="headerlink" title="git的过滤"></a>git的过滤</h3><p><code>.gitignore</code>文件,为git的提交提供过滤</p><p>强制添加可以使用<code>git add -f FILE</code></p><h3 id="配置别名alias"><a href="#配置别名alias" class="headerlink" title="配置别名alias"></a>配置别名alias</h3><pre><code>git config    --global alias.&lt;ShortName&gt;    &lt;Command&gt;  </code></pre><p>修改<code>git log</code>的输出<br><code>git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</code></p><p>后文还有建设git服务器的文章。<br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000" target="_blank" rel="noopener">资料来源</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git标签&quot;&gt;&lt;a href=&quot;#git标签&quot; class=&quot;headerlink&quot; title=&quot;git标签&quot;&gt;&lt;/a&gt;git标签&lt;/h2&gt;&lt;h3 id=&quot;创建标签&quot;&gt;&lt;a href=&quot;#创建标签&quot; class=&quot;headerlink&quot; title=&quot;创建标签&quot;
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
